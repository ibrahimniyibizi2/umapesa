// src/components/UploadProgress.tsx
import React from 'react';
import { XMarkIcon, CheckCircleIcon, ExclamationCircleIcon } from '@heroicons/react/24/outline';
import { UploadProgress as UploadProgressType } from '../hooks/useFileUpload';

interface UploadProgressProps {
  uploadState: UploadProgressType;
  onRemove?: () => void;
  className?: string;
}

export const UploadProgress: React.FC<UploadProgressProps> = ({ 
  uploadState,
  onRemove,
  className = '',
}) => {
  if (uploadState.status === 'idle') {
    return null;
  }

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const getStatusColor = () => {
    switch (uploadState.status) {
      case 'uploading':
        return 'bg-blue-500';
      case 'completed':
        return 'bg-green-500';
      case 'error':
        return 'bg-red-500';
      default:
        return 'bg-gray-500';
    }
  };

  const getStatusIcon = () => {
    switch (uploadState.status) {
      case 'completed':
        return <CheckCircleIcon className="h-5 w-5 text-green-500" />;
      case 'error':
        return <ExclamationCircleIcon className="h-5 w-5 text-red-500" />;
      default:
        return (
          <div className="h-5 w-5 border-2 border-blue-500 rounded-full">
            <div 
              className="h-full bg-blue-500 rounded-full transition-all duration-300 ease-out"
              style={{ width: `${uploadState.progress}%` }}
            />
          </div>
        );
    }
  };

  return (
    <div className={`bg-white rounded-lg shadow p-4 ${className}`}>
      <div className="flex items-start">
        <div className="flex-shrink-0 pt-0.5">
          {getStatusIcon()}
        </div>
        <div className="ml-3 flex-1 min-w-0">
          <div className="flex justify-between">
            <p className="text-sm font-medium text-gray-900 truncate">
              {uploadState.fileName}
            </p>
            <p className="text-xs text-gray-500 ml-2">
              {formatFileSize(uploadState.fileSize)}
            </p>
          </div>
          <div className="mt-1.5">
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div
                className={`h-full rounded-full ${getStatusColor()} transition-all duration-300 ease-out`}
                style={{ width: `${uploadState.progress}%` }}
              />
            </div>
            <div className="mt-1 flex justify-between text-xs text-gray-500">
              <span>
                {uploadState.status === 'uploading' && 'Uploading...'}
                {uploadState.status === 'completed' && 'Upload complete'}
                {uploadState.status === 'error' && 'Upload failed'}
              </span>
              <span>{Math.round(uploadState.progress)}%</span>
            </div>
          </div>
          {uploadState.status === 'error' && uploadState.error && (
            <p className="mt-1 text-xs text-red-600">{uploadState.error}</p>
          )}
        </div>
        {onRemove && (
          <button
            type="button"
            onClick={onRemove}
            className="ml-2 flex-shrink-0 text-gray-400 hover:text-gray-500"
          >
            <XMarkIcon className="h-5 w-5" />
          </button>
        )}
      </div>
    </div>
  );
};